'use strict';

QUnit.module('–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é letters', () => {
	QUnit.test('–û—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã', (assert) => {
		assert.strictEqual(letters('1234'), '1234');
		assert.strictEqual(letters('abcd'), 'abcd');
		assert.strictEqual(letters('–æ–ª–¥–∂ —Ñ—ã–≤–∞'), '–æ–ª–¥–∂ —Ñ—ã–≤–∞');
		assert.strictEqual(letters(',.;=\n\t '), ',.;=\n\t ');

		assert.strictEqual(letters('1234', true), '1234');
		assert.strictEqual(letters('abcd', true), 'abcd');
		assert.strictEqual(letters('–æ–ª–¥–∂ —Ñ—ã–≤–∞', true), '–æ–ª–¥–∂ —Ñ—ã–≤–∞');
		assert.strictEqual(letters(',.;=\n\t ', true), ',.;=\n\t ');

		assert.strictEqual(letters('1234', false), '1234');
		assert.strictEqual(letters('abcd', false), 'abcd');
		assert.strictEqual(letters('–æ–ª–¥–∂ —Ñ—ã–≤–∞', false), '–æ–ª–¥–∂ —Ñ—ã–≤–∞');
		assert.strictEqual(letters(',.;=\n\t ', false), ',.;=\n\t ');
	});

	QUnit.test('–£–¥–∞–ª—è–µ—Ç –∏–¥—É—â–∏–µ –ø–æ–¥—Ä—è–¥ –±—É–∫–≤—ã', (assert) => {
		assert.strictEqual(letters('111'), '');
		assert.strictEqual(letters('www'), '');
		assert.strictEqual(letters('...'), '');
		assert.strictEqual(letters('   '), '');
	});

	QUnit.test('–û—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—É—é –±—É–∫–≤—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª—è–µ—Ç', (assert) => {
		assert.strictEqual(letters('121', true), '12');
		assert.strictEqual(letters('wWw', true), 'wW');
		assert.strictEqual(letters('.-.', true), '.-');
		assert.strictEqual(letters(' 0 ', true), ' 0');
	});

	QUnit.test('–û—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª—è–µ—Ç', (assert) => {
		assert.strictEqual(letters('121', false), '21');
		assert.strictEqual(letters('wWw', false), 'Ww');
		assert.strictEqual(letters('.-.', false), '-.');
		assert.strictEqual(letters(' 0 ', false), '0 ');
	});

	QUnit.test('–£–¥–∞–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±—É–∫–≤—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö', (assert) => {
		assert.strictEqual(letters('–ø—Ä–∏–≤–µ—Ç, –º–∏—Ä'), '–ø–≤–µ—Ç, –º');
		assert.strictEqual(letters('hello, world'), 'he, wrd');
		assert.strictEqual(letters('–º–∞–º–∞ –º—ã–ª–∞ —Ä–∞–º—É'), '—ã–ª—Ä—É');
		assert.strictEqual(letters('"–ö—É–∫–∞—Ä–µ–∫—É!", —Å–∫–∞–∑–∞–ª –ü–µ—Ç—É—Ö'), '–ö—Ä!,—Å–∑–ª–ü—Ç—Ö');

		assert.strictEqual(letters('–º–∞–º–∞ –º—ã–ª–∞ —Ä–∞–º—É', true), '–º–∞ —ã–ª—Ä—É');
		assert.strictEqual(letters('–æ—Ç —Ç–æ–ø–æ—Ç–∞ –∫–æ–ø—ã—Ç', true), '–æ—Ç –ø–∞–∫—ã');
		assert.strictEqual(letters('hello world', true), 'helo wrd');

		assert.strictEqual(letters('–º–∞–º–∞ –º—ã–ª–∞ —Ä–∞–º—É', false), '—ã–ª —Ä–∞–º—É');
		assert.strictEqual(letters('–æ—Ç —Ç–æ–ø–æ—Ç–∞ –∫–æ–ø—ã—Ç', false), '–∞ –∫–æ–ø—ã—Ç');
		assert.strictEqual(letters('hello world', false), 'he world');
	});

	QUnit.test('–¢–∏–ø–∏—á–Ω—ã–π –ø–ª–µ—Å–π—Ö–æ–ª–¥–µ—Ä ru+en', (assert) => {
		assert.strictEqual(letters('–í–æ—Ç –≤–∞–º —è—Ä–∫–∏–π –ø—Ä–∏–º–µ—Ä —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π ‚Äî –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–º–∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—É—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —à–∏—Ä–æ–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–∞—Å—Å–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–∏—è. –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≥—Ä–∞–Ω–∏—Ü–∞ –æ–±—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤ –Ω–µ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —à–∞–Ω—Å–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –¢–∞–∫–∂–µ –∫–∞–∫ –±–∞–∑–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä —Ä–∞–∑–≤–∏—Ç–∏—è, –∞ —Ç–∞–∫–∂–µ —Å–≤–µ–∂–∏–π –≤–∑–≥–ª—è–¥ –Ω–∞ –ø—Ä–∏–≤—ã—á–Ω—ã–µ –≤–µ—â–∏ ‚Äî –±–µ–∑—É—Å–ª–æ–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–æ—Ä–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π.'), '–í–ü–¢—â');

		assert.strictEqual(letters('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec lobortis, est et auctor fringilla, augue purus condimentum mi, vitae laoreet nulla nulla eleifend enim. Sed bibendum tempus ex eget gravida. Phasellus luctus odio nec ultrices placerat. Donec ac nisl sit amet est semper mollis quis at neque. Cras vel erat nisi. Nunc ipsum justo, tempor in eros vitae, commodo suscipit diam. Fusce luctus et odio at luctus. Suspendisse eu condimentum orci. Sed malesuada suscipit arcu in elementum. Fusce efficitur elit ipsum, ullamcorper sodales ante bibendum nec.', true), 'Lorem ipsudlta,cng.DbfvSxPhqCNjF');

	});

	QUnit.test('–†–∞–∑–Ω—ã–µ –±–∞–π—Ç-–∫–æ–¥—ã –≤ utf-8', (assert) => {
		assert.strictEqual(letters('ÒüøæÒüøøøøæøøøØøøØøøøøæøøøÒèøæØøøøøæøøøÒèøæ'), 'ÒüøæÒüøø');

		assert.strictEqual(letters('ÒüøæÒüøøøøæøøøØøø', true), 'ÒüøæÒüøøøøæøøøØøø');

		assert.strictEqual(letters('ÔøΩØøøøøæøøøÒèøæÒèøøÒüøæÒüøø', false), 'ÔøΩØøøøøæøøøÒèøæÒèøøÒüøæÒüøø');
	});

	QUnit.test('–ë—É–∫–≤—ã –∏–∑ —è–∑—ã–∫–æ–≤, –≥–¥–µ —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–µ—Ç—Å—è —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ', (assert) => {
		assert.strictEqual(letters('ﬂøêÄÄﬂøêÄÄﬂøêÄÄﬂøêÄÄﬂøêÄÄﬂøêÄÄﬂøêÄÄﬂøêÄÄ', false), 'ﬂøêÄÄ');
	});

	QUnit.test('–î–æ–ª–∂–Ω–∞ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ç–∏–ø–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞', (assert) => {
		assert.strictEqual(letters(new String('123')), '123'); // String –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∏ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

		assert.throws(() => {
			letters(undefined);
		}, /–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏/, '–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏');

		assert.throws(() => {
			letters(NaN, true);
		}, /–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏/, '–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏');

		assert.throws(() => {
			letters(1, false);
		}, /–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏/, '–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏');
	});
});
